USE <Tables >


SELECT*
FROM ALBUM
ORDER BY TITLE DESC

SELECT*
FROM ALBUM
ORDER BY TITLE

SELECT *
FROM EMPLOYEE
WHERE LASTNAME='King'

SELECT *
FROM Employee

SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY

UPDATE  CUSTOMER
SET FIRSTNAME='Robert',  LASTNAME='Walter'
WHERE ((FIRSTNAME='Aaron') AND( LASTNAME= 'Mitchell'));

INSERT INTO GENRE ( GENREID, NAME)
VALUES (26,'Russian');
INSERT INTO GENRE ( GENREID, NAME)
VALUES (27,'Classic');

SELECT *
FROM EMPLOYEE 
WHERE HIREDATE 
BETWEEN '1-JUN-2003' AND '1-MAR-2004'

SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN  15 AND 50;

SELECT *
FROM Employee 
/

SELECT *
FROM EMPLOYEE
WHERE LASTNAME='King'
/


SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME='Andrew' AND REPORTSTO=NULL

/
SELECT*
FROM ALBUM
ORDER BY TITLE DESC
/

SELECT FIRST_NAME
FROM CUSTOMERS 
ORDER BY CITY
/
INSERT INTO GENRE ( GENREID, NAME)
VALUES (17,'Russian');
INSERT INTO GENRE ( GENREID, NAME)
VALUES (18,'Classic');
--todo
INSERT INTO EMPOYEE(EMPLOYEEID,LASTNAME, FIRSTNAME,TITLE,REPORSTSTO, BIRTHDATE,HIREDATE,ADDRESS CITY,STATE,POSTALCODE,PHONE,FAX, EMAIL)
VALUES();

INSERT INTO CUSTOMER()
VALUES();

UPDATE  CUSTOMER
SET (FIRSTNAME='Robert' AND LASTNAME='Walter')
WHERE FIRSTNAME='Aaron' LASTNAME= 'Mitchell')

UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

SELECT *
FROM INVOICE
WHERE BILLING_ADDRESS LIKE 'T%';

SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN  15 AND 50;

SELECT *
FROM EMPLOYEE 
WHERE HIREDATE 
BETWEEN '1-JUN-2003' AND '1-MAR-2004'



DELETE 
FROM CUSTOMER
WHERE (FIRSTNAME='ROBERT') AND (LASTNAME='WALTER');


-- 3.1
CREATE OR REPLACE TIMEDATE
    RETURN NUMBER Z NUMBER;
    BEGIN
    Z:=SYSDATE;
    RETURN Z;
END;
/ 
DBMS_OUTPUT.PUT_LINE(SELECT TIMEDATE() FROM DUAL);



CREATE OR REPLACE GETLENGTH
    RETURN NUMBER Y IS NUMBER;
    BEGIN
    SELECT  LENGTH(NAME) INTO Y FROM MEDIATYPE WHERE MEDIATYPEID=M_ID;
    RETURN Y
END;
SELECT GETLENGTH(1) FROM DUAL;

--3.2

CREATE OR REPLACE FUNCTION GETTAVG
RETURN NUMBER IS TAVG NUMBER;
BEGIN 
    SELECT AVG(TOTAL) INTO TAVG FROM INVOICE;
    RETURN (TAVG);
END;
/
SELECT GETTAVG() FROM DUAL;

CREATE OR REPLACE  MOSTEXPENSIVE
RETURN NUMBER IS PRICE NUMBER;
BEGIN 
    SELECT MAX(UNITPRICE INTO PRICE FROM TRACK);
    RETURN PRICE;
END;
/
SELECT MOSTEXPENSIVE() FROM DUAL;

--3.3
CREATE OR REPLACE GETRAVG
RETURN NUMBER IS RAVG NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO RAVG FROM INVOICELINE;
    RETURN(RAVG);
END;
/
SELECT GETRAVG() FROM DUAL;

--3.4
CREATE OR REPLACE EMPAFTER1968
RETURN SYS_REFCURSOR IS EMP1968
BEGIN
    OPEN EMP1968 FOR SELECT * FROM EMPLOYEES WHERE BIRTHDATE >'01-JAN-1968';
    RETURN EMP1968
END;
/
SELECT EMPAFTER1968 FROM DUAL;

--4.1
CREATE OR REPLACE PROCEDURE GETNAMES(S OUT SYS_REFCRUSOR)
IS 
BEGIN
    OPEN S FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/
SET SERVEROUTPUT ON 
DECLARE
    S SYS_REFCRUSOR;
    FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE;
    LAST_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GETNAMES(S);
    LOOP
        FETCH S
        INTO FIRST_NAME,LAST_NAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRST_NAME ||' '|| LAST_NAME);
    END LOOP;
    CLOSE S;
END;

4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_INFO(
    E_EMPLOYEEID IN EMPLOYEE.EMPLOYEEID%TYPE,
    E_LASTNAME IN EMPLOYEE.LASTNAME%TYPE,
    E_FIRSTNAME IN EMPLOYEE.FIRSTNAME%TYPE,
    E_ADDRESS IN EMPLOYEE.ADDRESS%TYPE,
    E_CITY IN EMPLOYEE.CITY%TYPE,
    E_COUNTRY IN EMPLOYEE.COUNTRY%TYPE,
    E_POSTALCODE IN EMPLOYEE.POSTALCODE%TYPE,
    E_PHONE IN EMPLOYEE.PHONE%TYPE,
    E_FAX IN EMPLOYEE.FAX%TYPE,
    E_EMAIL IN EMPLOYEE.EMAIL%TYPE)
IS
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = E_LASTNAME WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET FIRSTNAME = E_FIRSTNAME WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET ADDRESS = E_ADDRESS WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET CITY = E_CITY WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET COUNTRY = E_COUNTRY WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET POSTALCODE = E_POSTALCODE WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET PHONE = E_PHONE WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET FAX = E_FAX WHERE EMPLOYEEID = E_EMPLOYEEID;
    UPDATE EMPLOYEE SET EMAIL = E_EMAIL WHERE EMPLOYEEID = E_EMPLOYEEID;
    COMMIT;
END;
/
EXECUTE UPDATE_EMPLOYEE_INFO(10, 'Ilya', 'B', '20 Gine Lane', 'Brooklyn', 'United States', '10701', '+1 (999) 999-9997', '+1 (999) 999-9996', 'ishm@chinookcorp.com');

CREATE OR RETURN MANAGER(
    E_EMPLOYEEDID IN EMPLOYEE.EMPLOYEEID%TYPE,
    E_MANAGERID OUT EMPLOYEE.REPORTSTO%TYPE)
IS
BEGIN
    SELECT REPORTSTO INTO E_MANGERID
    FROM EMPLOYEE WHERE EMPLOYEEID=E_EMPLOYEEID;
END;
/
SET SERVEROUTPUT ON
DECLARE 
    E_EMPLOYEEID EMPLOYEE.EMPLOYEEID%TYPE;
    E_MANGERID EMPLOYEE.REPORTSTO%TYPE;
BEGIN
    RETURN_MANGER(10,E_MANGERID);
    DBMS_OUTPUT.PUT_LINE(E_MANGERID);
END;
--4.3

CREATE OR REPLACE PROCEDURE GET_NAME_COMPANY(
    CUSTOMER_ID IN CUSTOMER.COMERID%TYPE,
    FN OUT CUSTOMER.FIRSTNAME%TYPE,
    LN OUT CUSTOMER.LASTNAME%TYPE,
    CO OUT CUSTOMER.COMPANY%TYPE)
IS
BEGIN 
    SELECT FIRSTNAME,LASTNAME,COMPANY
    INTO FN,LN,CO
    FROM CYSTOMER WHERE CUSTOMERID=CUSTOMER_ID
END;
/

CREATE OR REPLACE PROCEDURE DELETEINVOICE
     INVOICEIDIN IN INVOICE.INVOICEID%TYPE)
IS
BEGIN 
    DELETE FROM INVOICELINE WHERE INVOICEID=INVOICEIDIN;
    DELETE FROM INVOICE WHERE INVOICEID = INCOVICEIDIN;
END;
/

--6.0

--CREATER AN AFTER UPDATE TRIGGER
CREATE OR REPLACE TRIGGER AFTER_UPDATE_ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.FIRSTNAME || ' ' || :NEW.LASTNAME || ' created');
END;

CREATE OR REPLACE TRIGGER AFTERUPDATE
AFTER UPDATE OR INSERT ON ALBUM FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.TITLE || ' created');
END;

CREATE OR REPLACE TRIGGER AFTERDELETE
AFTER DELETE ON CUSTOMER FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:OLD.FIRSTNAME || ' ' || :OLD.LASTNAME || ' deleted');
END;

--7.0
--INNER
SELECT FIRSTNAME, LASTNAME, INVOICEID FROM CUSTOMER C
JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID
ORDER BY C.LASTNAME;

--OUTER
SELECT FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER C
FULL JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID
ORDER BY C.LASTNAME;

--RIGHT
SELECT NAME, TITLE FROM ALBUM AL
RIGHT JOIN ARTIST AR ON AL.ARTISTID = AR.ARTISTID
ORDER BY NAME;

--CROSS
SELECT NAME, TITLE FROM ALBUM AL
CROSS JOIN ARTIST AR
ORDER BY NAME ASC;

--SELF
SELECT
    (E.FIRSTNAME || ' ' || E.LASTNAME) EMPLOYEE,
    (M.FIRSTNAME || ' ' || M.LASTNAME) MANAGER
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE M ON E.REPORTSTO = M.EMPLOYEEID
ORDER BY MANAGER;